"""
Django settings for wiki2_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_path = BASE_DIR / '.env'
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-%v*ui-c50yj49l24bu==3kozfi54teabp)ae0qt+$69#@6wodn')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,10.1.1.224,localhost')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '10.1.1.224']

LOGIN_URL="login"
LOGOUT_URL="logout"
LOGIN_REDIRECT_URL="wiki:wiki"
LOGOUT_REDIRECT_URL="wiki:wiki"

NTFY_BASE_URL="https://ntfy.sh/" # "https://ntfy.sh/"
NTFY_TOPIC="Mathimuts-Wiki"


# INFO: File Upload Settings
# Set a max size for files uploaded into memory (in bytes).
# This is less critical as Django streams large files to disk, but it's good practice.
# 2.5MB is the default.
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5 MB
# The maximum size, in bytes, of a request body.
# This affects file uploads. Set it larger than your Nginx limit.
DATA_UPLOAD_MAX_MEMORY_SIZE = 11811160064 # 11 GB
# For files: owner can read/write, group can read, others can read. (644)
FILE_UPLOAD_PERMISSIONS = 0o644
# For directories: owner can read/write/execute, group can read/execute, others can read/execute. (755)
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755


# INFO: Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    "wiki2.apps.Wiki2Config",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wiki2_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'wiki2.context_processors.wiki_menu',
            ],
        },
    },
]

WSGI_APPLICATION = 'wiki2_project.wsgi.application'


# INFO: Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3')
DB_NAME = os.environ.get('DB_NAME', BASE_DIR / 'db.sqlite3')
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST = os.environ.get('DB_HOST')
DB_PORT = os.environ.get('DB_PORT')

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}


# INFO: Cache (Redis)
# https://docs.djangoproject.com/en/5.2/topics/cache/
REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1", # DB 1 for cache
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Custom setting for HEIC to PNG conversion cache duration
# Default is 7 days (60 seconds * 60 minutes * 24 hours * 7 days)
HEIC_CACHE_DURATION = os.environ.get('HEIC_CACHE_DURATION', 7 * 60 * 60 * 24)


# INFO: Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# INFO: Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True # For secure connection
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# INFO:Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Brussels'
TIME_FORMAT = 'H:i'

USE_I18N = True

USE_TZ = True


# INFO: Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# INFO:Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# INFO:CSRF Settings
# CSRF Trusted Origins (Important when behind a proxy or specific domain)
CSRF_TRUSTED_ORIGINS_STRING = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', '')
if CSRF_TRUSTED_ORIGINS_STRING:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STRING.split(',') if origin.strip()]
else:
    # Default for local development convenience, adjust for production
    if DEBUG:
        CSRF_TRUSTED_ORIGINS = [f"http://{host}:{os.environ.get('APP_PORT', '8000')}" for host in ALLOWED_HOSTS if host not in ['*', '.example.com']]
        CSRF_TRUSTED_ORIGINS.extend([f"http://localhost:{os.environ.get('APP_PORT', '8000')}", f"http://127.0.0.1:{os.environ.get('APP_PORT', '8000')}"])


# INFO:Logging
# Logging (optional but good practice for Docker to log to stdout)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# INFO: FOR SSL/TLS (HTTPS) Configuration
# If Nginx is handling SSL termination and forwarding as HTTP
# This tells Django to trust the X-Forwarded-Proto header from your proxy for determining if a request is secure.
# Only set this if you are sure your proxy is setting this header correctly and cannot be spoofed by clients.
USE_X_FORWARDED_HOST = True # To derive the Host header from X-Forwarded-Host
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ALLOWED_HOSTS will need to include the domain names Nginx is serving,
# e.g., 'localhost', 'yourdomain.com'
# The values from your .env file should already cover this.

# CSRF_TRUSTED_ORIGINS should also include the origins Nginx will serve for,
# e.g., 'http://localhost', 'https://yourdomain.com'
# This is especially important if you are using HTTPS.
# The values from your .env file should be updated accordingly.

# If you are using HTTPS, also consider:
SECURE_SSL_REDIRECT = True # If all traffic should be HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# INFO: For <iframe> tags (to render PDFs)
# By default, Django sets this to 'DENY'.
# We change it to 'SAMEORIGIN' to allow embedding of our own content (like PDFs)
# in iframes, while still protecting against clickjacking from external sites.
X_FRAME_OPTIONS = 'SAMEORIGIN'